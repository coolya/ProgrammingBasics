//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.5.+'
    }
}
plugins {
    id 'maven-publish'
    id 'base'
    id 'co.riiid.gradle' version '0.4.2'
}


group 'de.itemis'
description ="RCP with all needed plugins"

//will import the gradle plugins fetched from nexus
import de.itemis.mps.gradle.BundleMacosJdk
import de.itemis.mps.gradle.GitBasedVersioning
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.RunAntScript
import de.itemis.mps.gradle.BuildLanguages





// Dependency versions
ext.mpsVersion = '2021.1.3'
ext.iets3Version = '2021.1.+'

// Default repository credentials
if (!project.hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
    ext.nexusPassword = ''
}
logger.info 'Repository username: {}', project.nexusUsername

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
        ]



configurations {
    mps
    mbeddrPlatformArtifacts
    jdk
    ant_lib
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
	mbeddrPlatformArtifacts "org.iets3:opensource:$iets3Version"
    jdk "com.jetbrains.jdk:jbr_jcef:11_0_11-b1341.60:windows-x64@tgz"
	jdk "com.jetbrains.jdk:jbr_jcef:11_0_11-b1341.60:osx-x64@tgz"
	jdk "com.jetbrains.jdk:jbr_jcef:11_0_11-b1341.60:osx-aarch64@tgz"
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

// ___________________ utilities ___________________
File scriptFile(String relativePath) {
    new File("$rootDir/build/$relativePath")
}

repositories {
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    mavenCentral()
}

// JDK_HOME required for adding tools.jar into classpath of the forked ant process
if (!hasProperty("jdk_home")) {
    def java_home = System.properties['java.home']
    def jdk_home = java_home
    ext.jdk_home = jdk_home
}



//define directories
ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpsDir = new File(artifactsDir, 'mps')
ext.projectLibrariesDir = new File(buildDir, 'project-libraries')
ext.jdkDir = new File(artifactsDir, 'jdk')

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into mpsDir
    doFirst { delete mpsDir }
}

task resolveMpsArtifacts(type: Copy) {
    dependsOn configurations.mbeddrPlatformArtifacts
    from {
        configurations.mbeddrPlatformArtifacts.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

task resolveJDKDependencies(type: Copy) {
   description "Resolves distribution dependencies, copies them to $jdkDir stripping version numbers"
   dependsOn configurations.jdk
   from { configurations.jdk.resolve() }
   into jdkDir

   rename { filename ->
       def resolvedArtifact = configurations.jdk.resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
       return resolvedArtifact.name + "-" + resolvedArtifact.classifier + "." + resolvedArtifact.extension
   }
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('BuildRCP/.mps/libraries.xml')
}

task setup {
    // We resolve MPS not for the users to use it but for the distribution packaging script to be able to refer to it.
    dependsOn resolveMpsArtifacts
    dependsOn generateLibrariesXml
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

// ___________________ /utility tasks ___________________


//define directories
ext.rcp_home = '-Drcp.home=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.mps_home =  '-Dmps.home=' + resolveMps.destinationDir.getAbsolutePath()
ext.artifacts_dir = '-Dartifacts.root=' + new File(rootDir, 'artifacts')
ext.buildDate = "-Dbuild.date=" + new Date().toString()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
//NOT USED yet
//ext.buildNumber = "-Dbuild.number=" + getApplicationBuild()

// default arguments for ANT
ext.defaultScriptArgs = [mps_home, rcp_home, build_dir, artifacts_dir, ext.buildDate, /*ext.buildNumber*/]
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({ true }) + project.files("$project.jdk_home/lib/tools.jar")

//idea: run tasks for the generate .xml files directly
task build_allScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]){
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('rcp.allScripts/build-allScripts.xml')
}


task build_branding(type: RunAntScript, dependsOn: build_allScripts) {
    description "Creates branding.jar with icons and startup directory with .options and .bat/.sh scripts"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('de.itemis.rcp/branding.xml')
    targets 'clean', 'assemble'
}


task build_genericDistro(type: RunAntScript, dependsOn: build_branding) {
    description "Creates generic directory layout for RCPs including: bin, languages, lib, plugins folder and build.number"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('de.itemis.rcp/build-generic.xml')
    targets 'clean', 'assemble'
}

task build_winDistro(type: RunAntScript, dependsOn: [build_genericDistro, resolveJDKDependencies]) {
    description "Creates a win RCP"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('de.itemis.rcp/distro-win.xml')
    targets 'clean', 'assemble'
}

task build_macDistro(type: RunAntScript, dependsOn: [build_genericDistro]) {
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('de.itemis.rcp/distro-mac.xml')
    targets 'clean', 'assemble'
}

task build_dmg(type: BundleMacosJdk, dependsOn: build_macDistro ) {
    description "Main task to build macOS RCP"
    rcpArtifact rootProject.file('artifacts/rcp.distro.mac/MPS_RCP-mac.zip')
    jdkDependency "com.jetbrains.jdk:jbr_jcef:11_0_11-b1341.60:osx-x64@tgz"
    jdkDirname "."
    outputFile rootProject.file('artifacts/rcp-macos-intel.tgz')
}

task build_dmg_aarch(type: BundleMacosJdk, dependsOn: build_macDistro ) {
    description "Main task to build macOS RCP"
    rcpArtifact rootProject.file('artifacts/rcp.distro.mac/MPS_RCP-mac.zip')
    jdkDependency "com.jetbrains.jdk:jbr_jcef:11_0_11-b1341.60:osx-aarch64@tgz"
    jdkDirname "."
    outputFile rootProject.file('artifacts/rcp-macos-apple-silicon.tgz')
}

task buildAll (
    dependsOn: [build_winDistro, build_dmg, build_dmg_aarch]) {
          description "Creates RCPs for: MacOS, Windows"
    }

rootProject.defaultTasks 'buildAll'

github {
    owner = System.getenv("GITHUB_REPOSITORY_OWNER") ?: "none"
    repo = "ProgrammingBasics"
    token = rootProject.findProperty('github.token') ?: 'empty'
    tagName = 'nightly-' + version
    targetCommitish = GitBasedVersioning.getGitCommitHash()
    name = 'Nighly Build ' + version
    prerelease = true
    assets = [rootProject.file('artifacts/rcp-macos-apple-silicon.tgz'), rootProject.file('artifacts/rcp-macos-intel.tgz'), ]
}
githubRelease.doFirst {
    // do late body init to avoid executing listMergedPRs during config phase
    github {
        body = releaseNotes
    }
}